pipeline {
  agent{
      label 'maven'
  }
  stages {
    stage('Build Openshift App from master branch') {
      steps {
        sh "mvn install"
        
      }
    }
     stage('cleanup app'){
                steps{
                    script{
                 openshift.withCluster() {
                    openshift.withProject() {
                        def templateName = 'mapit'
                       openshift.selector("all", [ app : templateName ]).delete() 
                  if (openshift.selector("secrets", templateName).exists()) { 
                    openshift.selector("secrets", templateName).delete()
                  }
                    }
                }
            }
                }
            }
    
    
    
    stage('Create Image Builder') {
      
          
      steps {
        script {
          
          openshift.withCluster() {
            
            openshift.newBuild("--name=mapit", "--image-stream=redhat-openjdk18-openshift:1.1", "--binary")
            }
          }
          }
		  }
        
      
    
    stage('Build Image') {
      steps {
        script {
          
          openshift.withCluster() {
            
            openshift.selector("bc", "mapit").startBuild("--from-file=target/mapit-spring.jar", "--wait")
            }
          }
          }
        }
      
    
   stage('expose service'){
      steps {
        script{
          openshift.withCluster() {
            
            openshift.newApp("mapit", "--name=mapit")
	     def svc = openshift.selector('svc', "mapit")
	     svc.expose()
	     echo "service exposed"
            }
          }
          }
	  }
        
      }
     }
